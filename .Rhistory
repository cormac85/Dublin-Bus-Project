setwd("C:/Users/King Mac/Google Drive/Coding/DIT/5. Project/Dublin-Bus-Project")
load("C:/Users/King Mac/Google Drive/Coding/DIT/5. Project/Dublin-Bus-Project/data_import_analysis.RData")
csvFiles
#Function: To import all .csv data from the RTPI premade database for the
#purpose of analysis and creating a suitable metric for comparison.
#Author: Cormac Nolan
#Date: 03/03/2015
#load packages here and some housekeeping
library(dplyr)
library(RMySQL)
rm(list=ls())
setwd("C:/Users/King Mac/Google Drive/Coding/DIT/5. Project/siri.20130131.csv")
#FUNCTIONS GO HERE!
#converts the timestamp into a date time POSIXct object
dtConvert <- function(timestamp){
return(as.POSIXct(timestamp/1000000, origin="1970-01-01"))
}
#converts two latitude and longitude co-ordinates into a distance in km.
coordConvert <- function(lat1, long1, lat2, long2){
mypi = 3.14159265358979323846
radius = 6378.137
deg2rad=mypi/180
lat1 = lat1*deg2rad
lat2 = lat2*deg2rad
long1 = long1*deg2rad
long2 = long2*deg2rad
distance=acos(sin(lat1)*sin(lat2)+cos(lat1)*cos(lat2)*cos(long2-long1))*radius
return(distance*1000)
}
#+++++++++++++++++++++++++++START SCRIPT+++++++++++++++++++++++++++++++++#
#STEP 1: Import required data into an sql database
#create list of file names
csvFiles = list.files(pattern="*.csv")
mydb = dbConnect(MySQL(), user='manoj', password='password', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='qwort', host='localhost')
dbSendQuery(mydb, "drop table if exists Table1")
dbSendQuery(mydb, "CREATE DATABASE DublinBus;")
dbSendQuery(mydb, "USE DublinBus")
dbSendQuery(mydb, "drop table if exists Table1")
#Read csv data into data frame and name accordingly
raw01 <- read.csv("siri.20130101.csv",header=FALSE)
names = c("Timestamp", "LineID", "Direction", "JourneyPatternID",
"TimeFrame", "VehicleJourneyID", "Operator", "Congestion",
"LonWGS84", "LatWGS84", "Delay", "BlockID", "VehicleID",
"StopID", "AtStop" )
names(raw01) <- names
raw01$Direction <- NULL #redundant
train01 <-raw01
train01$Operator <- NULL
View(train01)
train01$Timestamp[1]
options(scipen=999)
train01$Timestamp[1]
options(scipen=0)
train01$Timestamp[1]
filter(train01, LineID == null)
filter(train01, LineID == NA)
sum(is.na(train01$LineID))
sum(is.na(train01))
train01[train01=="null"]=NA
sum(is.na(train01))
View(train01)
View(train01&LineID)
View(train01$LineID)
sum(is.na(train01$LineID))
sum(is.na(train01$JourneyPatternID))
tail(train01$JourneyPatternID)
tail(train01$VehicleJourneyID)
dbSendQuery(mydb, "
CREATE TABLE Table1 (
Timestamp BIGINT UNSIGNED,
LineID SMALLINT UNSIGNED,
JourneyPatternID VARCHAR(8),
TimeFrame DATE,
VehicleJourneyID INT UNSIGNED,
Congestion BOOL,
LonWGS84 NUMERIC(7,6),
LatWGS84 NUMERIC(7,6),
Delay INT,
BlockID INT UNSIGNED,
VehicleID INT UNSIGNED,
StopID INT UNSIGNED,
AtStop BOOL,
);
")
dbSendQuery(mydb, "
CREATE TABLE Table1 (
Timestamp BIGINT UNSIGNED,
LineID SMALLINT UNSIGNED,
JourneyPatternID VARCHAR(8),
TimeFrame DATE,
VehicleJourneyID INT UNSIGNED,
Congestion BOOL,
LonWGS84 NUMERIC(7,6),
LatWGS84 NUMERIC(7,6),
Delay INT,
BlockID INT UNSIGNED,
VehicleID INT UNSIGNED,
StopID INT UNSIGNED,
AtStop BOOL
);
")
dbSendQuery(mydb, "")
dbSendQuery(mydb, "SHOW COLUMNS FROM Table1;")
dbSendQuery(mydb, "DROP TABLE Table1;")
dbSendQuery(mydb, "DROP TABLE Table1;")
dbListTables(mydb)
dbClearResult(dbListResults(conn)[[1]])
dbClearResult(dbListResults(mydb)[[1]])
dbListTables(mydb)
dbSendQuery(mydb, "
DROP TABLE Table1;
")
dbSendQuery(mydb, "
CREATE TABLE Table1 (
TimestampID INT UNSIGNED NOT NULL AUTO_INCREMENT,
Timestamp BIGINT UNSIGNED,
LineID SMALLINT UNSIGNED,
JourneyPatternID VARCHAR(8),
TimeFrame DATE,
VehicleJourneyID INT UNSIGNED,
Congestion BOOL,
LonWGS84 NUMERIC(7,6),
LatWGS84 NUMERIC(7,6),
Delay INT,
BlockID INT UNSIGNED,
VehicleID INT UNSIGNED,
StopID INT UNSIGNED,
AtStop BOOL,
PRIMARY KEY (TimestampID)
);
")
dbListTables(mydb)
dbGetQuery(mydb, "
select * from information_schema.columns
where table_schema = 'your_db'
order by table_name,ordinal_position
")
dbGetQuery(mydb, "
select * from information_schema.columns
where table_schema = 'dublinbus'
order by table_name,ordinal_position
")
save.image("C:/Users/King Mac/Google Drive/Coding/DIT/5. Project/Dublin-Bus-Project/data_import_analysis.RData")
